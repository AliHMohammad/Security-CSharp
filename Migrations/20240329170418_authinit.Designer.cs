// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Security_CSharp.Data;

#nullable disable

namespace Security_CSharp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240329170418_authinit")]
    partial class authinit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("user_username")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("role_name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("user_username", "role_name");

                    b.HasIndex("role_name");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            user_username = "Admin",
                            role_name = "ADMIN"
                        });
                });

            modelBuilder.Entity("Security_CSharp.Security.Entitites.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Name = "ADMIN"
                        },
                        new
                        {
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("Security_CSharp.Security.Entitites.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "Admin",
                            Email = "admin@kea.dk",
                            PasswordHash = new byte[] { 195, 98, 110, 174, 131, 11, 250, 48, 81, 27, 23, 107, 209, 220, 231, 180, 84, 123, 61, 164, 241, 74, 148, 44, 195, 151, 247, 94, 175, 100, 65, 128 },
                            PasswordSalt = new byte[] { 11, 145, 241, 194, 113, 155, 124, 62, 184, 27, 23, 252, 87, 157, 140, 70, 142, 210, 38, 83, 124, 180, 38, 159, 131, 170, 32, 237, 112, 231, 192, 46, 140, 135, 109, 229, 224, 50, 226, 190, 66, 222, 118, 182, 32, 132, 141, 92, 47, 156, 42, 151, 45, 241, 244, 139, 214, 70, 237, 0, 106, 45, 119, 140 }
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Security_CSharp.Security.Entitites.Role", null)
                        .WithMany()
                        .HasForeignKey("role_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Security_CSharp.Security.Entitites.User", null)
                        .WithMany()
                        .HasForeignKey("user_username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
