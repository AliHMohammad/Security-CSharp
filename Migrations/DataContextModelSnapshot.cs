// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Security_CSharp.Data;

#nullable disable

namespace Security_CSharp.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("user_username")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("role_name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("user_username", "role_name");

                    b.HasIndex("role_name");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            user_username = "Admin",
                            role_name = "ADMIN"
                        });
                });

            modelBuilder.Entity("Security_CSharp.Security.Entitites.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Name = "ADMIN"
                        },
                        new
                        {
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("Security_CSharp.Security.Entitites.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("password_salt");

                    b.HasKey("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "Admin",
                            CreatedAt = new DateTime(2024, 4, 4, 0, 23, 5, 626, DateTimeKind.Local).AddTicks(6639),
                            Email = "admin@kea.dk",
                            PasswordHash = new byte[] { 118, 32, 177, 51, 119, 123, 86, 224, 16, 251, 196, 0, 95, 95, 188, 85, 223, 81, 247, 189, 174, 168, 230, 60, 167, 20, 213, 232, 54, 207, 6, 2 },
                            PasswordSalt = new byte[] { 233, 166, 7, 229, 89, 240, 79, 179, 118, 35, 224, 96, 147, 219, 217, 124, 17, 243, 186, 23, 238, 149, 167, 251, 136, 78, 105, 173, 228, 4, 135, 130, 76, 49, 194, 114, 174, 150, 48, 177, 218, 148, 33, 167, 190, 44, 126, 90, 241, 86, 162, 133, 37, 3, 150, 71, 184, 238, 250, 62, 176, 89, 120, 26 }
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Security_CSharp.Security.Entitites.Role", null)
                        .WithMany()
                        .HasForeignKey("role_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Security_CSharp.Security.Entitites.User", null)
                        .WithMany()
                        .HasForeignKey("user_username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
