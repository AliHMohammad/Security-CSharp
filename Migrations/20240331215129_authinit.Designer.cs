// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Security_CSharp.Data;

#nullable disable

namespace Security_CSharp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240331215129_authinit")]
    partial class authinit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("user_username")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("role_name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("user_username", "role_name");

                    b.HasIndex("role_name");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            user_username = "Admin",
                            role_name = "ADMIN"
                        });
                });

            modelBuilder.Entity("Security_CSharp.Security.Entitites.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Name = "ADMIN"
                        },
                        new
                        {
                            Name = "USER"
                        });
                });

            modelBuilder.Entity("Security_CSharp.Security.Entitites.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob")
                        .HasColumnName("password_salt");

                    b.HasKey("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "Admin",
                            CreatedAt = new DateTime(2024, 3, 31, 23, 51, 28, 811, DateTimeKind.Local).AddTicks(862),
                            Email = "admin@kea.dk",
                            PasswordHash = new byte[] { 104, 150, 192, 42, 149, 165, 109, 242, 220, 225, 227, 195, 10, 63, 127, 9, 102, 100, 46, 155, 27, 153, 137, 108, 23, 255, 19, 143, 115, 211, 102, 125 },
                            PasswordSalt = new byte[] { 150, 55, 9, 229, 163, 127, 81, 230, 230, 198, 107, 114, 191, 247, 18, 107, 49, 226, 149, 36, 118, 14, 251, 175, 37, 255, 199, 114, 61, 15, 202, 132, 87, 105, 203, 4, 0, 152, 141, 215, 69, 65, 178, 180, 223, 15, 0, 124, 228, 41, 11, 52, 85, 181, 73, 187, 109, 180, 160, 40, 190, 26, 27, 169 }
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Security_CSharp.Security.Entitites.Role", null)
                        .WithMany()
                        .HasForeignKey("role_name")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Security_CSharp.Security.Entitites.User", null)
                        .WithMany()
                        .HasForeignKey("user_username")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
